// push():
//
// Добавьте один или несколько элементов в конец массива
// let fruits = ['apple', 'banana', 'orange'];
// fruits.push('added')
// console.log(fruits)
//====================================================================================================
// pop():
//
// Удалите последний элемент в массиве и верните этот элемент
// const users = [
//     {
//         id: 1,
//         name: 'Bob',
//         isStudent: true,
//     },
//     {
//         id: 2,
//         name: 'Alex',
//         isStudent: true,
//     },
//     {
//         id: 3,
//         name: 'Ann',
//         isStudent: true,
//     },
//     {
//         id: 4,
//         name: 'Donald',
//         isStudent: false,
//     },
// ];
// let lastUser = users.pop()
// console.log(users)
// console.log(lastUser)


// shift():
//
//
// Удалите первого юзера и верните его
// let lastUser = users.shift()
// console.log(users)
// console.log(lastUser)


// unshift():
//
//
// Добавьте один и более элементов в начало массива
// const obj = {
//     id: 0,
//     name: 'TestName',
//     isStudent: false,
// }
// users.unshift(obj)
// console.log(users)

//====================================================================================================
// reverse(), join(), split():
// Сделать reverse слова
//
// Исходная строка:
// let str = 'JavaScript is awesome';
// let res = str.split(' ').reverse().join(' ')
//
// console.log(res)


//====================================================================================================
// concat():
//
// Напишите функцию mergeArrays, которая принимает на вход два массива и возвращает новый массив,
// содержащий все элементы из обоих массивов.

// const arr1 = [1, 2, 3]
// const arr2 = [4, 5, 6]
//
// const mergeArrays = arr1.concat(arr2)
// console.log(mergeArrays)
//
// const mergeArrays2 = () => arr1.concat(arr2)
// //здесь я пробовал сначала вывести через стрелочную, для того что бы выводился результат функции, а не сама функция
// //нужно не - console.log(mergeArrays2), а console.log(mergeArrays2())   ()
// console.log(mergeArrays2())

//====================================================================================================
// flat():
//
//
// Напишите функцию JavaScript, которая сглаживает вложенный массив любой глубины
// const arr = [1, [2, 3], [[4], [5, 6]]]
// const arr2 = [1, [2, [3, [4, [5, [6]]]]]]
//
// const flattenArray = () => arr.flat(3)
// const flattenArray2 = () => arr2.flat(5)
//
// console.log(flattenArray(),flattenArray2())

//====================================================================================================
// find():
// Напишите функцию JavaScript, которая находит первый элемент в массиве, удовлетворяющий заданному условию.
//
// Пример:
//
// Входной массив: [10, 20, 30, 40, 50]
// Условие: Найти первый элемент больше 25
// Выходные данные: 30
//
// Входной массив: ["яблоко", "банан", "апельсин", "киви"].
// Условие: Найти первый элемент, начинающийся на "o".
// Выходные данные: "апельсин"
//
// Необходимо написать функцию findFirstElement, которая принимает на вход массив и функцию условия и возвращает первый элемент в массиве, удовлетворяющий условию.


// const num = [10, 20, 30, 40, 50]
// const findFirstElement = () => num.find((num) => num > 25)
// console.log(findFirstElement())


//выше я сделал правильно, но получилось не универсально и привязано к конкретному массиву
// const findFirstElement = (arr, condition) => arr.find(condition);
//
// const numbers = [10, 20, 30, 40, 50];
// let firstNumberGreaterThan25 = findFirstElement(numbers, (num) => num > 25);
// console.log(firstNumberGreaterThan25); // Output: 30
//Разбор кода
//
// 	1.	Функция findFirstElement:
// 	•	Принимает два параметра: arr (массив) и condition (функция условия).
// 	•	Использует метод find для поиска первого элемента, который удовлетворяет условию.
// 	2.	Использование функции:
// 	•	Определяем массив numbers.
// 	•	Вызываем findFirstElement с numbers и условием (num) => num > 25.
// 	•	Выводим результат.


//====================================================================================================
// includes():

// Напишите функцию JavaScript, которая проверяет, присутствует ли заданный элемент в массиве.
// Входной массив: [1, 2, 3, 4, 5]
// Элемент для проверки: 3
// Выход: true
//
// Входной массив: ["яблоко", "банан", "апельсин", "киви"].
// Элемент для проверки: "виноград"
// Выход: false
//
// Необходимо написать функцию checkElement, которая принимает на вход массив и элемент и возвращает true, если элемент присутствует в массиве, и false в противном случае.

const numbers = [1, 2, 3, 4, 5]
// const checkElement = () => numbers.includes(4)
// console.log(checkElement())

const checkElement = (arr, number) => arr.includes(number)

const result = checkElement(numbers, 4);
console.log(result)
//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
//"Короче arr я так назвал аргумент массива, number это значение(которое мы ищем в массиве(если рассматривать конкретно
// с includes)) получается к аргументу массив мы применяем метод поиска, а в скобках аргумент со значением поиска.
// Дальше в результат мы присваиваем checkElement и в аргументы кладем numbers - это arr к которому уже применен метод, и вместо
// number вставляем нужное значение для поиска"
//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!


